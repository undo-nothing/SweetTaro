from .util import load_class


class BaseRedis:

    def __init__(self, server, params=None):
        self._server = server
        self._params = params if params else {}

        options = self._params.get("OPTIONS", {})
        self._client_cls = options.get("CLIENT_CLASS", "mysite.tools.redis_utils.client.DefaultClient")
        self._client_cls = load_class(self._client_cls)
        self._client = None

    @property
    def client(self):
        """
        return client_cls obj.
        """
        if self._client is None:
            self._client = self._client_cls(self._server, self._params)
        return self._client

    @property
    def row_client(self):
        """
        return a row redis client.
        """
        return self.client.get_client()


class HashRedis(BaseRedis):

    def hset(self, key, name, value):
        key = self.client.make_key(key)
        value = self.client.encode(value)
        self.row_client.hset(key, name, value)

    def hget(self, key, name, default=None):
        key = self.client.make_key(key)
        value = self.row_client.hget(key, name)
        if value is None:
            return default

        return self.client.decode(value)

    def hdel(self, key, name):
        key = self.client.make_key(key)
        self.row_client.hdel(key, name)

    def hgetall(self, key):
        key = self.client.make_key(key)
        values = self.row_client.hgetall(key)

        if not values:
            return {}

        for k in values:
            values[k] = self.client.decode(values[k])

        return values

    def hkeys(self, key):
        key = self.client.make_key(key)
        return self.row_client.hkeys(key)

    def hvals(self, key):
        key = self.client.make_key(key)
        values = self.row_client.hvals(key)
        return [self.client.decode(i) for i in values]

    def hexists(self, key, name):
        key = self.client.make_key(key)
        return self.row_client.hexists(key, name)


class ListRedis(BaseRedis):

    def lpush(self, key, value):
        key = self.client.make_key(key)
        value = self.client.encode(value)
        self.row_client.lpush(key, value)

    def rpush(self, key, value):
        key = self.client.make_key(key)
        value = self.client.encode(value)
        self.row_client.rpush(key, value)

    def lpushx(self, key, value):
        key = self.client.make_key(key)
        value = self.client.encode(value)
        self.row_client.lpushx(key, value)

    def rpushx(self, key, value):
        key = self.client.make_key(key)
        value = self.client.encode(value)
        self.row_client.rpushx(key, value)

    def lpop(self, key):
        key = self.client.make_key(key)
        value = self.row_client.lpop(key)
        return self.client.encode(value)

    def rpop(self, key):
        key = self.client.make_key(key)
        value = self.row_client.rpop(key)
        return self.client.encode(value)

    def llen(self, key):
        key = self.client.make_key(key)
        return self.row_client.llen(key)

    def lindex(self, key, index):
        key = self.client.make_key(key)
        value = self.row_client.lindex(key, index)
        return self.client.encode(value)

    def list_iter(self, key):
        list_count = self.llen(key)
        for index in range(list_count):
            yield self.lindex(key, index)
