
from .util import load_class


class RedisCache(object):

    def __init__(self, server, params):
        self._server = server
        self._params = params

        options = params.get("OPTIONS", {})
        self._client_cls = options.get("CLIENT_CLASS", "mysite.tools.redis_utils.client.DefaultClient")
        self._client_cls = load_class(self._client_cls)
        self._client = None

    @property
    def client(self):
        """
        Lazy client connection property.
        """
        if self._client is None:
            self._client = self._client_cls(self._server, self._params)
        return self._client

    def set(self, *args, **kwargs):
        return self.client.set(*args, **kwargs)

    def incr_version(self, *args, **kwargs):
        return self.client.incr_version(*args, **kwargs)

    def add(self, *args, **kwargs):
        return self.client.add(*args, **kwargs)

    def get(self, key, default=None, version=None, client=None):
        return self.client.get(key, default=default, version=version,
                               client=client)

    def delete(self, *args, **kwargs):
        return self.client.delete(*args, **kwargs)

    def delete_pattern(self, *args, **kwargs):
        return self.client.delete_pattern(*args, **kwargs)

    def delete_many(self, *args, **kwargs):
        return self.client.delete_many(*args, **kwargs)

    def clear(self):
        return self.client.clear()

    def get_many(self, *args, **kwargs):
        return self.client.get_many(*args, **kwargs)

    def set_many(self, *args, **kwargs):
        return self.client.set_many(*args, **kwargs)

    def incr(self, *args, **kwargs):
        return self.client.incr(*args, **kwargs)

    def decr(self, *args, **kwargs):
        return self.client.decr(*args, **kwargs)

    def exists(self, *args, **kwargs):
        return self.client.exists(*args, **kwargs)

    def keys(self, *args, **kwargs):
        return self.client.keys(*args, **kwargs)

    def iter_keys(self, *args, **kwargs):
        return self.client.iter_keys(*args, **kwargs)

    def ttl(self, *args, **kwargs):
        return self.client.ttl(*args, **kwargs)

    def persist(self, *args, **kwargs):
        return self.client.persist(*args, **kwargs)

    def expire(self, *args, **kwargs):
        return self.client.expire(*args, **kwargs)

    def lock(self, *args, **kwargs):
        return self.client.lock(*args, **kwargs)

    def close(self, **kwargs):
        self.client.close(**kwargs)

    def touch(self, key, timeout=None, version=None):
        return self.client.touch(key, timeout=timeout, version=version)
